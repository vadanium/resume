{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","changeText","state","headerTextList","headerTextPos","headerText","headerTextDel","fullText","setState","substring","length","setTimeout","this","id","className","Component","App","scroll","document","getElementById","addEventListener","scrolling","_scrollingPage","direction","scrollTop","_pos","_direction","scrollTo","idNum","_scrollName","replace","idNumNow","parseInt","_scrollMax","to","querySelectorAll","offsetTop","smoothScroll","root","interval","setInterval","destination","Math","ceil","_step","console","log","clearInterval","_time","checkScroll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a704dfd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './scss/style.scss';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            headerTextList: [\r\n                'Web Developer',\r\n                'Dreamer',\r\n                'Creative',\r\n            ],\r\n            headerTextPos: 0,\r\n            headerText: '',\r\n            headerTextDel: false,\r\n        };\r\n    }\r\n\r\n    changeText = () => {\r\n        const {headerTextList, headerTextPos, headerText, headerTextDel} = this.state;\r\n        const fullText = headerTextList[headerTextPos];\r\n\r\n        this.setState({\r\n            headerText: !headerTextDel ? fullText.substring(0, headerText.length + 1) : fullText.substring(0, headerText.length - 1),\r\n        });\r\n\r\n        if(! headerTextDel && headerText === fullText) {\r\n            this.setState({\r\n                headerTextDel: headerText !== ''?true:false,\r\n            });\r\n        }\r\n\r\n        if(headerTextDel && headerText === '') {\r\n            this.setState({\r\n                headerTextPos: headerTextPos < headerTextList.length - 1 ? headerTextPos + 1 : 0,\r\n                headerTextDel: false,\r\n            });\r\n        }\r\n\r\n        setTimeout(this.changeText, headerText===fullText && !headerTextDel?3000:180);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.changeText();\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <header id=\"header\" className=\"header scroll scroll-1\">\r\n            <div className=\"header-top\"></div>\r\n\r\n            <div className=\"header-title\">\r\n                <div className=\"name\">\r\n                    <h1>WISNU NUGROHO</h1>\r\n                </div>\r\n                <div className=\"name-changed\">\r\n                    <span>I AM</span><span className=\"changed-text\">{this.state.headerText}</span><div className=\"blink\"></div>\r\n                </div>\r\n                <span>SIMPLE BUT PERFECT</span> \r\n            </div>  \r\n\r\n            <div className=\"scroll-icon-wrapper\">\r\n                <span className=\"scroll-icon\">\r\n                    <span className=\"scroll-icon-outer\">\r\n                    <span className=\"scroll-icon-inner\"></span>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport './scss/style.scss';\nimport Header from './Header';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this._pos = 0;\n    this._direction = '';\n    this._scrollName = 'scroll-1';\n    this._scrollMax = 0;\n    this._scrollingPage = false;\n    this._step = 10;\n    this._time = 15;\n  }\n\n  scroll = () => {\n    let root = document.getElementById('root');\n    root.addEventListener('scroll', this.scrolling);\n  }\n\n  scrolling = () => {\n    if(this._scrollingPage) return;\n    this._scrollingPage = true;\n    let posNow = document.getElementById('root').scrollTop;\n    let direction = '';\n\n    direction = posNow > this._pos ? 'down' : 'up';\n    this._direction = direction;\n    \n    this.scrollTo(direction);\n  }\n\n  scrollTo = (direction) => {\n    let idNum = this._scrollName.replace('scroll-', '');\n    let idNumNow = direction === 'down'? parseInt(idNum)+1 : parseInt(idNum)-1;\n    if(idNumNow > this._scrollMax) idNumNow = this._scrollMax;\n    if(idNumNow < 1) idNumNow = 1;\n    this._scrollName = 'scroll-'+idNumNow;\n    let to = document.querySelectorAll('.'+this._scrollName)[0].offsetTop;\n\n    this.smoothScroll(to);\n  }\n\n  smoothScroll = (to) => {\n    let root = document.getElementById('root');\n    let interval = setInterval(() => {\n      if(Math.ceil(root.scrollTop) !== Math.ceil(to)) {\n        let destination;\n        if(this._direction==='down') {\n          destination = Math.ceil(root.scrollTop+root.scrollTop/this._step);\n          if(destination >= to) destination = Math.ceil(to);\n        }\n        else {\n          destination = root.scrollTop-root.scrollTop/this._step;\n          if(destination <= to) destination = Math.ceil(to);\n          console.log([this._direction, destination, Math.ceil(to)])\n        }\n        root.scrollTo(0, destination);\n      } else {\n        clearInterval(interval);\n        this._scrollingPage = false;\n        this._pos = to;\n      }\n    }, this._time);\n  }\n\n  checkScroll = () => {\n    this._scrollMax = document.querySelectorAll('.scroll').length;\n  }\n\n  componentDidMount() {\n    this.checkScroll();\n    this.scroll();\n  }\n\n  render() {\n    return(\n      <>\n      <Header />\n      <section id=\"menu\" className=\"menu scroll scroll-2\">\n        <div className=\"title\">SPACE TO EXPLORE</div>\n        <ul>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n        </ul>\n        <div className=\"credit\">WISNU - 2020</div>\n      </section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}